<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:tx="http://www.springframework.org/schema/tx" 
	   xmlns:oscache="http://www.springmodules.org/schema/oscache" 
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   					   http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
	   					   http://www.springframework.org/schema/context 
	   					   http://www.springframework.org/schema/context/spring-context-3.1.xsd 
	   					   http://www.springframework.org/schema/aop 
	   					   http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
	   					   http://www.springframework.org/schema/tx 
	   					   http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
	   					   http://www.springmodules.org/schema/oscache 
	   					   http://www.springmodules.org/schema/cache/springmodules-oscache.xsd
	   					   http://www.springframework.org/schema/mvc
						   http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd"
	   					   >
	<!--系统国际化文件读取-->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">  
      <property name="basenames">
         <list>
            <!-- 默认加载的资源文件在src目录下或其他classpath下 -->
            <value>globalMessages</value>
            <value>pluginsMessages</value>
         </list>
     </property>
	</bean> 
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

    <!--
    	多数据源配置，第一个数据源对象,名称中必须指定数据库类型名称为前缀
    	名称前缀如下：mysql，oracle，sqlserver，db2，sybase，informix，postgres
    -->
	<bean id="mysql_dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" >
			<value>${datasource.mysql1.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${datasource.mysql1.url}</value>
		</property>
		<property name="user">
			<value>${datasource.mysql1.username}</value>
		</property>
		<property name="password">
			<value>${datasource.mysql1.password}</value>
		</property>
		<property name="acquireIncrement">
			<value>${c3p0.acquireIncrement}</value>
		</property>
		<property name="initialPoolSize">
			<value>${c3p0.initialPoolSize}</value>
		</property>
		<property name="minPoolSize">
			<value>${c3p0.minPoolSize}</value>
		</property>
		<property name="maxPoolSize">
			<value>${c3p0.maxPoolSize}</value>
		</property>
		<property name="maxIdleTime">
			<value>${c3p0.maxIdleTime}</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>${c3p0.idleConnectionTestPeriod}</value>
		</property>
		<property name="maxStatements">
			<value>${c3p0.maxStatements}</value>
		</property>
		<property name="numHelperThreads">
			<value>${c3p0.numHelperThreads}</value>
		</property>
	</bean>
	
	 <!--
    	多数据源配置，第二个数据源对象,名称中必须指定数据库类型名称为前缀
    	名称前缀如下：mysql，oracle，sqlserver，db2，sybase，informix，postgres
    -->
	<bean id="oracle_dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" >
			<value>${datasource.oracle1.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${datasource.oracle1.url}</value>
		</property>
		<property name="user">
			<value>${datasource.oracle1.username}</value>
		</property>
		<property name="password">
			<value>${datasource.oracle1.password}</value>
		</property>
		<property name="acquireIncrement">
			<value>${c3p0.acquireIncrement}</value>
		</property>
		<property name="initialPoolSize">
			<value>${c3p0.initialPoolSize}</value>
		</property>
		<property name="minPoolSize">
			<value>${c3p0.minPoolSize}</value>
		</property>
		<property name="maxPoolSize">
			<value>${c3p0.maxPoolSize}</value>
		</property>
		<property name="maxIdleTime">
			<value>${c3p0.maxIdleTime}</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>${c3p0.idleConnectionTestPeriod}</value>
		</property>
		<property name="maxStatements">
			<value>${c3p0.maxStatements}</value>
		</property>
		<property name="numHelperThreads">
			<value>${c3p0.numHelperThreads}</value>
		</property>
	</bean>
	
	<!--
    	多数据源配置，第三个数据源对象,名称中必须指定数据库类型名称为前缀
    	名称前缀如下：mysql，oracle，sqlserver，db2，sybase，informix，postgres
    -->
	<bean id="sqlserver_dataSource3" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" >
			<value>${datasource.sqlserver1.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${datasource.sqlserver1.url}</value>
		</property>
		<property name="user">
			<value>${datasource.sqlserver1.username}</value>
		</property>
		<property name="password">
			<value>${datasource.sqlserver1.password}</value>
		</property>
		<property name="acquireIncrement">
			<value>${c3p0.acquireIncrement}</value>
		</property>
		<property name="initialPoolSize">
			<value>${c3p0.initialPoolSize}</value>
		</property>
		<property name="minPoolSize">
			<value>${c3p0.minPoolSize}</value>
		</property>
		<property name="maxPoolSize">
			<value>${c3p0.maxPoolSize}</value>
		</property>
		<property name="maxIdleTime">
			<value>${c3p0.maxIdleTime}</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>${c3p0.idleConnectionTestPeriod}</value>
		</property>
		<property name="maxStatements">
			<value>${c3p0.maxStatements}</value>
		</property>
		<property name="numHelperThreads">
			<value>${c3p0.numHelperThreads}</value>
		</property>
	</bean>
	
	<!--自定义动态数据源注入，实现了spring动态数据源接口-->
    <bean id="dataSource" class="com.sw.core.data.dbholder.DynamicDataSource">   
       <property name="targetDataSources">   
          <map key-type="java.lang.String">   
             <entry key="mysql_dataSource1" value-ref="mysql_dataSource1"/>  
             <entry key="oracle_dataSource2" value-ref="oracle_dataSource2"/>
             <entry key="sqlserver_dataSource3" value-ref="sqlserver_dataSource3"/>    
          </map>   
       </property>   
       <property name="defaultTargetDataSource" ref="mysql_dataSource1"/>   
    </bean>  
     <!-- 系统参数初始化 -->
    <bean id="systemConfigInit" class="com.sw.core.initialize.SystemConfigInit" init-method="init">
    	<property name="configLocation" value="classpath:config.properties" />
    	<property name="dataSourceType" value="mysql_dataSource1" />
    </bean>	
    <!-- <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>-->
    <!-- 系统插件配置加载 -->
    <bean id="pluginsConfigLoader" class="com.sw.core.initialize.PluginsConfigLoader" init-method="init">
    	<property name="configLocation" value="classpath:com/sw/plugins" />
    </bean>
    
    <!-- ibatis3 SqlSessionFactory注入 -->
	<bean id="sqlSessionFactory" class="org.springframework.orm.ibatis3.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:sqlMapConfig.xml" />
		<property name="mapperLocations" value="classpath:com/sw/plugins/**/ibatis/*.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>
		
	<!--ibatis3 SqlSessionTemplate注入-->
	<bean id="sqlSessionTemplate" class="org.springframework.orm.ibatis3.SqlSessionTemplate">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<!--自定义commonDao注入-->
	<bean id="commonDao" class="com.sw.core.data.dao.CommonDao">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
	</bean>
	
   
    	
    <!-- 系统插件初始化到数据库 -->
    <bean id="pluginsConfigInit" class="com.sw.core.initialize.PluginsConfigInit" init-method="init">
    	<property name="commonDao" ref="commonDao" />
    </bean>
    
    <!-- 数据字典分类初始化到数据库 -->
    <!-- 
   <bean id="dictionaryConfigInit" class="com.sw.core.initialize.DictionaryConfigInit" init-method="init">
    	<property name="configLocation" value="classpath:dictionary.xml" />
    	<property name="commonDao" ref="commonDao" />
    </bean>
     -->
    
	<!-- 缓存配置 -->
	<oscache:config configLocation="classpath:oscache.properties" id="cacheProvider" />
	<oscache:annotations providerId="cacheProvider">
		<oscache:caching id="caching" cronExpression="0 1 * * *" refreshPeriod="86400" />
		<oscache:flushing id="flushing" />
	</oscache:annotations>
	
	<bean id="cacheManager" class="org.springmodules.cache.provider.oscache.OsCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:oscache.properties" />
    </bean>
    
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/>

	<!-- 使用AspectJ方式配置AOP -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<aop:config proxy-target-class="true" />

    <!-- 使用注解方式定义事务 -->
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" />

	<!-- 数据连接事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置事务传播特性 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置哪些类的哪些方法参与事务 -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.sw.plugins..*.*Service(..))" advice-ref="transactionAdvice" />
	</aop:config>

	<!-- 配置freemarkerManager -->
	<!-- <bean id="freemarkerManager" class="org.apache.struts2.views.freemarker.FreemarkerManager" />-->

	<!-- 配置JCaptcha验证码功能 -->
	<bean id="captchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
		<property name="captchaEngine">
			<bean class="com.sw.core.filter.JCaptchaEngine" />
		</property>
		<!-- 验证码过期时间 -->
		<property name="minGuarantedStorageDelayInSeconds" value="600" />
	</bean>
	
	<!--自定义jCaptchaFilter注入-->
	<bean id="jCaptchaFilter" class="com.sw.core.filter.JCaptchaFilter">
		<property name="captchaService" ref="captchaService" />
	</bean>
	
	<!--自定义loginJCaptchaFilter注入-->
	<bean id="loginJCaptchaFilter" class="com.sw.core.filter.LoginJCaptchaFilter">
		<property name="captchaService" ref="captchaService" />
	</bean>
	 
</beans>